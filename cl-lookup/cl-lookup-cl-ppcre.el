(require 'cl-lookup)
(defvar cl-lookup-cl-ppcre-root "http://www.weitz.de/cl-ppcre/")

(mapc #'(lambda (entry)
	  (destructuring-bind (name path) entry
	    (let ((symbol (intern (downcase name) cl-lookup-obarray)))
	      (if (boundp symbol)
		  (pushnew path (symbol-value symbol) :test #'equal)
		  (set symbol `(,path))))))
      '(("cl-ppcre" (cl-lookup-cl-ppcre-root ""))
        ("cl-ppcre:*allow-named-registers*" (cl-lookup-cl-ppcre-root "#*allow-named-registers*"))
        ("cl-ppcre:*allow-quoting*" (cl-lookup-cl-ppcre-root "#*allow-quoting*"))
        ("cl-ppcre:*optimize-char-classes*" (cl-lookup-cl-ppcre-root "#*optimize-char-classes*"))
        ("cl-ppcre:*property-resolver*" (cl-lookup-cl-ppcre-root "#*property-resolver*"))
        ("cl-ppcre:*regex-char-code-limit*" (cl-lookup-cl-ppcre-root "#*regex-char-code-limit*"))
        ("cl-ppcre:*use-bmh-matchers*" (cl-lookup-cl-ppcre-root "#*use-bmh-matchers*"))
        ("cl-ppcre:all-matches" (cl-lookup-cl-ppcre-root "#all-matches"))
        ("cl-ppcre:all-matches-as-strings" (cl-lookup-cl-ppcre-root "#all-matches-as-strings"))
        ("cl-ppcre:create-optimized-test-function" (cl-lookup-cl-ppcre-root "#create-optimized-test-function"))
        ("cl-ppcre:create-scanner" (cl-lookup-cl-ppcre-root "#create-scanner"))
        ("cl-ppcre:define-parse-tree-synonym" (cl-lookup-cl-ppcre-root "#define-parse-tree-synonym"))
        ("cl-ppcre:do-matches" (cl-lookup-cl-ppcre-root "#do-matches"))
        ("cl-ppcre:do-matches-as-strings" (cl-lookup-cl-ppcre-root "#do-matches-as-strings"))
        ("cl-ppcre:do-register-groups" (cl-lookup-cl-ppcre-root "#do-register-groups"))
        ("cl-ppcre:do-scans" (cl-lookup-cl-ppcre-root "#do-scans"))
        ("cl-ppcre:parse-string" (cl-lookup-cl-ppcre-root "#parse-string"))
        ("cl-ppcre:parse-tree-synonym" (cl-lookup-cl-ppcre-root "#parse-tree-synonym"))
        ("cl-ppcre:ppcre-error" (cl-lookup-cl-ppcre-root "#ppcre-error"))
        ("cl-ppcre:ppcre-invocation-error" (cl-lookup-cl-ppcre-root "#ppcre-invocation-error"))
        ("cl-ppcre:ppcre-syntax-error" (cl-lookup-cl-ppcre-root "#ppcre-syntax-error"))
        ("cl-ppcre:ppcre-syntax-error-pos" (cl-lookup-cl-ppcre-root "#ppcre-syntax-error-pos"))
        ("cl-ppcre:ppcre-syntax-error-string" (cl-lookup-cl-ppcre-root "#ppcre-syntax-error-string"))
        ("cl-ppcre:quote-meta-chars" (cl-lookup-cl-ppcre-root "#quote-meta-chars"))
        ("cl-ppcre:regex-apropos" (cl-lookup-cl-ppcre-root "#regex-apropos"))
        ("cl-ppcre:regex-apropos-list" (cl-lookup-cl-ppcre-root "#regex-apropos-list"))
        ("cl-ppcre:regex-replace" (cl-lookup-cl-ppcre-root "#regex-replace"))
        ("cl-ppcre:regex-replace-all" (cl-lookup-cl-ppcre-root "#regex-replace-all"))
        ("cl-ppcre:register-groups-bind" (cl-lookup-cl-ppcre-root "#register-groups-bind"))
        ("cl-ppcre:scan" (cl-lookup-cl-ppcre-root "#scan"))
        ("cl-ppcre:scan-to-strings" (cl-lookup-cl-ppcre-root "#scan-to-strings"))
        ("cl-ppcre:split" (cl-lookup-cl-ppcre-root "#split"))
        ))

(provide 'cl-lookup-cl-ppcre)